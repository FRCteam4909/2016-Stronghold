// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4909.Bionics2016.subsystems;

import org.usfirst.frc4909.Bionics2016.RobotMap;
import org.usfirst.frc4909.Bionics2016.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController shooterLeftWheel = RobotMap.shootershooterLeftWheel;
    private final SpeedController shooterRightWheel = RobotMap.shootershooterRightWheel;
    private final Encoder leftShootEncoder = RobotMap.shooterleftShootEncoder;
    private final Encoder rightShootEncoder = RobotMap.shooterrightShootEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final int ENCODER_RES=1024;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public double getLeftRPM()
    {
    	double leftEncRPM=60/(ENCODER_RES*leftShootEncoder.getPeriod());
    	return leftEncRPM;
    }
    
    public double getRightRPM()
    {
    	double rightEncRPM=60/(ENCODER_RES*rightShootEncoder.getPeriod());
    	return rightEncRPM;
    }
    
    public void setShooterWheels(double setpoint)
    {
    	shooterLeftWheel.set(setpoint);
    	shooterRightWheel.set(-setpoint);
    }
    
    public void setShooterWheelsSameRPM(){
    	/*
    	while(Math.abs(getLeftRPM())>Math.abs(getRightRPM()))
    	{
    		if(shooterLeftWheel.get()>0)
    		{
    			shooterLeftWheel.set(shooterLeftWheel.get()-0.001);
    		}
    		
    		else
    		{
    			shooterLeftWheel.set(shooterLeftWheel.get()+0.001);
    		}
    	}
 
    	while(Math.abs(getLeftRPM())<Math.abs(getRightRPM()))
    	{
    		if(shooterRightWheel.get()>0)
    		{
    			shooterRightWheel.set(shooterRightWheel.get()-0.001);
    		}
    		
    		else
    		{
    			shooterRightWheel.set(shooterRightWheel.get()+0.001);
    		}    	    	
    	}
    */
    	
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

